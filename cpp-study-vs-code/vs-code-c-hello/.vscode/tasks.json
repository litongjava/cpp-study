// https://code.visualstudio.com/docs/editor/tasks
{
    "version": "2.0.0",
    "tasks": [{
      // 任务名称，与launch.json的preLaunchTask相对应
      "label": "Compile", 
      // 要使用的编译器，C++用g++
      "command": "D:\\dev_program\\MinGW\\bin\\g++.exe", 
      "args": [
        "${file}",
        // 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out
        "-o", 
        "${fileDirname}/${fileBasenameNoExtension}.exe",
        // 生成和调试有关的信息
        "-g", 
        // 开启额外警告
        "-Wall", 
        // 静态链接libgcc，一般都会加上
        "-static-libgcc", 
        // 生成的程序使用GBK编码，不加这一条会导致Win下输出中文乱码
        "-fexec-charset=UTF-8", 
        // C++最新标准为c++17，或根据自己的需要进行修改
        //"-std=c11", 
      ], 
      // 编译的命令，其实相当于VSC帮你在终端中输了这些东西
      // process是vsc把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍
      "type": "process", 
      "group": {
        "kind": "build",
        // 不为true时ctrl shift B就要手动选择了
        "isDefault": true 
      },
      "presentation": {
        "echo": true,
        // 执行任务时是否跳转到终端面板，可以为always，silent，never。具体参见VSC的文档
        "reveal": "always", 
        // 设为true后可以使执行task时焦点聚集在终端，但对编译C/C++来说，设为true没有意义
        "focus": false, 
        // 不同的文件的编译信息共享一个终端面板
        "panel": "shared" 
      },
      // 此选项可以捕捉编译时终端里的报错信息；但因为有Lint，再开这个可能有双重报错
      // "problemMatcher":"$gcc" 
    }]
  }